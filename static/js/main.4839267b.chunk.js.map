{"version":3,"sources":["SoundfontProvider.js","index.js"],"names":["SoundfontProvider","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","loadInstrument","instrumentName","setState","instrument","Soundfont","audioContext","format","soundfont","nameToUrl","name","concat","hostname","then","playNote","midiNumber","resume","audioNode","state","play","activeAudioNodes","assign","defineProperty","stopNote","stop","stopAllNotes","values","forEach","node","prevProps","prevState","render","isLoading","React","Component","defaultProps","window","AudioContext","webkitAudioContext","soundfontHostname","noteRange","first","MidiNumbers","fromNote","last","keyboardShortcuts","KeyboardShortcuts","create","firstNote","lastNote","keyboardConfig","HOME_ROW","BasicPiano","react_default","a","createElement","src_SoundfontProvider","_ref","react_piano_esm","width","disabled","rootElement","document","getElementById","ReactDOM","className"],"mappings":"4QAMMA,cAgBJ,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAiBRQ,eAAiB,SAAAC,GAEfR,EAAKS,SAAS,CACZC,WAAY,OAEdC,IAAUD,WAAWV,EAAKD,MAAMa,aAAcJ,EAAgB,CAC5DK,OAAQb,EAAKD,MAAMc,OACnBC,UAAWd,EAAKD,MAAMe,UACtBC,UAAW,SAACC,EAAMF,EAAWD,GAC3B,SAAAI,OAAUjB,EAAKD,MAAMmB,SAArB,KAAAD,OAAiCH,EAAjC,KAAAG,OAA8CD,EAA9C,KAAAC,OAAsDJ,EAAtD,UAEDM,KAAK,SAAAT,GACNV,EAAKS,SAAS,CACZC,kBA/BaV,EAoCnBoB,SAAW,SAAAC,GACTrB,EAAKD,MAAMa,aAAaU,SAASH,KAAK,WACpC,IAAMI,EAAYvB,EAAKwB,MAAMd,WAAWe,KAAKJ,GAC7CrB,EAAKS,SAAS,CACZiB,iBAAkBzB,OAAO0B,OAAO,GAAI3B,EAAKwB,MAAME,iBAA7BzB,OAAA2B,EAAA,EAAA3B,CAAA,GACfoB,EAAaE,SAzCHvB,EA+CnB6B,SAAW,SAAAR,GACTrB,EAAKD,MAAMa,aAAaU,SAASH,KAAK,WAC/BnB,EAAKwB,MAAME,iBAAiBL,KAGfrB,EAAKwB,MAAME,iBAAiBL,GACpCS,OACV9B,EAAKS,SAAS,CACZiB,iBAAkBzB,OAAO0B,OAAO,GAAI3B,EAAKwB,MAAME,iBAA7BzB,OAAA2B,EAAA,EAAA3B,CAAA,GACfoB,EAAa,aAxDHrB,EA+DnB+B,aAAe,WACb/B,EAAKD,MAAMa,aAAaU,SAASH,KAAK,WACXlB,OAAO+B,OAAOhC,EAAKwB,MAAME,kBACjCO,QAAQ,SAAAC,GACnBA,GACFA,EAAKJ,SAGT9B,EAAKS,SAAS,CACZiB,iBAAkB,QAtEtB1B,EAAKwB,MAAQ,CACXE,iBAAkB,GAClBhB,WAAY,MAJGV,mFASjBG,KAAKI,eAAeJ,KAAKJ,MAAMS,2DAGd2B,EAAWC,GACxBD,EAAU3B,iBAAmBL,KAAKJ,MAAMS,gBAC1CL,KAAKI,eAAeJ,KAAKJ,MAAMS,iDAgEjC,OAAOL,KAAKJ,MAAMsC,OAAO,CACvBC,WAAYnC,KAAKqB,MAAMd,WACvBU,SAAUjB,KAAKiB,SACfS,SAAU1B,KAAK0B,SACfE,aAAc5B,KAAK4B,sBAlGOQ,IAAMC,WAAhC1C,EAUG2C,aAAe,CACpB5B,OAAQ,MACRC,UAAW,aACXN,eAAgB,wBA0FLV,QCpGTc,SAAe,IAAK8B,OAAOC,cAAgBD,OAAOE,qBAClDC,EAAoB,wCAEpBC,EAAY,CAChBC,MAAOC,IAAYC,SAAS,MAC5BC,KAAMF,IAAYC,SAAS,OAEvBE,EAAoBC,IAAkBC,OAAO,CACjDC,UAAWR,EAAUC,MACrBQ,SAAUT,EAAUI,KACpBM,eAAgBJ,IAAkBK,WAepC,SAASC,IACP,OACEC,EAAAC,EAAAC,cAACC,EAAD,CACEtD,eAAe,uBACfI,aAAcA,EACdM,SAAU2B,EACVR,OAAQ,SAAA0B,GAAA,IAAGzB,EAAHyB,EAAGzB,UAAWlB,EAAd2C,EAAc3C,SAAUS,EAAxBkC,EAAwBlC,SAAxB,OACN8B,EAAAC,EAAAC,cAACG,EAAA,EAAD,CACElB,UAAWA,EACXmB,MAAO,IACP7C,SAAUA,EACVS,SAAUA,EACVqC,SAAU5B,EACVa,kBAAmBA,OAO7B,IAAMgB,EAAcC,SAASC,eAAe,QAC5CC,IAASjC,OAAOsB,EAAAC,EAAAC,cAjChB,WACE,OACEF,EAAAC,EAAAC,cAAA,OAAKU,UAAU,OACbZ,EAAAC,EAAAC,cAAA,mGACAF,EAAAC,EAAAC,cAAA,OAAKU,UAAU,QACbZ,EAAAC,EAAAC,cAAA,KAAGU,UAAU,eAAb,4NACAZ,EAAAC,EAAAC,cAACH,EAAD,SA2BQ,MAASS","file":"static/js/main.4839267b.chunk.js","sourcesContent":["// See https://github.com/danigb/soundfont-player\n// for more documentation on prop options.\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Soundfont from 'soundfont-player';\n\nclass SoundfontProvider extends React.Component {\n  static propTypes = {\n    instrumentName: PropTypes.string.isRequired,\n    hostname: PropTypes.string.isRequired,\n    format: PropTypes.oneOf(['mp3', 'ogg']),\n    soundfont: PropTypes.oneOf(['MusyngKite', 'FluidR3_GM']),\n    audioContext: PropTypes.instanceOf(window.AudioContext),\n    render: PropTypes.func,\n  };\n\n  static defaultProps = {\n    format: 'mp3',\n    soundfont: 'MusyngKite',\n    instrumentName: 'acoustic_grand_piano',\n  };\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      activeAudioNodes: {},\n      instrument: null,\n    };\n  }\n\n  componentDidMount() {\n    this.loadInstrument(this.props.instrumentName);\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevProps.instrumentName !== this.props.instrumentName) {\n      this.loadInstrument(this.props.instrumentName);\n    }\n  }\n\n  loadInstrument = instrumentName => {\n    // Re-trigger loading state\n    this.setState({\n      instrument: null,\n    });\n    Soundfont.instrument(this.props.audioContext, instrumentName, {\n      format: this.props.format,\n      soundfont: this.props.soundfont,\n      nameToUrl: (name, soundfont, format) => {\n        return `${this.props.hostname}/${soundfont}/${name}-${format}.js`;\n      },\n    }).then(instrument => {\n      this.setState({\n        instrument,\n      });\n    });\n  };\n\n  playNote = midiNumber => {\n    this.props.audioContext.resume().then(() => {\n      const audioNode = this.state.instrument.play(midiNumber);\n      this.setState({\n        activeAudioNodes: Object.assign({}, this.state.activeAudioNodes, {\n          [midiNumber]: audioNode,\n        }),\n      });\n    });\n  };\n\n  stopNote = midiNumber => {\n    this.props.audioContext.resume().then(() => {\n      if (!this.state.activeAudioNodes[midiNumber]) {\n        return;\n      }\n      const audioNode = this.state.activeAudioNodes[midiNumber];\n      audioNode.stop();\n      this.setState({\n        activeAudioNodes: Object.assign({}, this.state.activeAudioNodes, {\n          [midiNumber]: null,\n        }),\n      });\n    });\n  };\n\n  // Clear any residual notes that don't get called with stopNote\n  stopAllNotes = () => {\n    this.props.audioContext.resume().then(() => {\n      const activeAudioNodes = Object.values(this.state.activeAudioNodes);\n      activeAudioNodes.forEach(node => {\n        if (node) {\n          node.stop();\n        }\n      });\n      this.setState({\n        activeAudioNodes: {},\n      });\n    });\n  };\n\n  render() {\n    return this.props.render({\n      isLoading: !this.state.instrument,\n      playNote: this.playNote,\n      stopNote: this.stopNote,\n      stopAllNotes: this.stopAllNotes,\n    });\n  }\n}\n\nexport default SoundfontProvider;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Piano, KeyboardShortcuts, MidiNumbers } from 'react-piano';\nimport 'react-piano/dist/styles.css';\n\nimport SoundfontProvider from './SoundfontProvider';\nimport './styles.css';\n\n// webkitAudioContext fallback needed to support Safari\nconst audioContext = new (window.AudioContext || window.webkitAudioContext)();\nconst soundfontHostname = 'https://d1pzp51pvbm36p.cloudfront.net';\n\nconst noteRange = {\n  first: MidiNumbers.fromNote('c3'),\n  last: MidiNumbers.fromNote('f4'),\n};\nconst keyboardShortcuts = KeyboardShortcuts.create({\n  firstNote: noteRange.first,\n  lastNote: noteRange.last,\n  keyboardConfig: KeyboardShortcuts.HOME_ROW,\n});\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <h1>Тренировка гамм</h1>\n      <div className=\"mt-5\">\n        <p className=\"description\">Сделано ради любимой и самой дорогой Сони</p>\n        <BasicPiano />\n      </div>\n    </div>\n  );\n}\n\nfunction BasicPiano() {\n  return (\n    <SoundfontProvider\n      instrumentName=\"acoustic_grand_piano\"\n      audioContext={audioContext}\n      hostname={soundfontHostname}\n      render={({ isLoading, playNote, stopNote }) => (\n        <Piano\n          noteRange={noteRange}\n          width={500}\n          playNote={playNote}\n          stopNote={stopNote}\n          disabled={isLoading}\n          keyboardShortcuts={keyboardShortcuts}\n        />\n      )}\n    />\n  );\n}\n\nconst rootElement = document.getElementById('root');\nReactDOM.render(<App />, rootElement);\n"],"sourceRoot":""}